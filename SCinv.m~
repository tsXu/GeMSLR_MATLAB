function [ y ] = SCinv( PRE, x, levi, resits )
%[ y ] = EBiFCinv( PRE, x, levi )
%   Approximately solve ( Ei* ( Bi \ ( F * ( Ci \ x ) ) ) );
%   PRE:    Preconditioning data structure
%   x:      The input vector
%   levi:   Level to apply the solve
%   resits: number of residual iteration for B and C

% compute Cinv*x
if (resits <= 1)
    y = solve_levi(PRE, x, levi+1);
else
    % z = M\y
    % r = y - B*z
    z = x.*0;
    r = x;
    for i = 1:resits-1
        e = solve_levi(PRE, r, levi+1);
        z = z + e;
        r = x - PRE.Levs{levi}.C * z;
    end
    e = solve_levi(PRE, r, levi+1);
    y = z + e;
end
% compute FCinv*x
y = PRE.Levs{levi}.F*y;
% compute BinvFCinv*x
if (resits <= 1)
    y = ( PRE.Levs{levi}.mUB \ ( PRE.Levs{levi}.mLB \ y ) );
else
    % z = M\y
    % r = y - B*z
    z = y.*0;
    r = y;
    for i = 1:resits-1
        e = ( PRE.Levs{levi}.mUB \ ( PRE.Levs{levi}.mLB \ r ) );
        z = z + e;
        r = y - PRE.Levs{levi}.B * z;
    end
    e = ( PRE.Levs{levi}.mUB \ ( PRE.Levs{levi}.mLB \ r ) );
    y = z + e;
end
% compute EBinvFCinv*x
y = PRE.Levs{levi}.E*y;

end

